#include <stdio.h>
#include <GL/glut.h>

int radius, x, y, pk, xinc, yinc;


void myDisplay(void)
{
	glClear(GL_COLOR_BUFFER_BIT);
	glColor3f(0.0, 0.0, 0.0);
	glPointSize(3.0);
	glBegin(GL_POINTS);

	pk = 1 - radius; // x^2+y^2-r^2=0
	// (5/4-r) decision point  

	for (h = 0; x <= y; x++)
	{
		if (pk < 0)  //as pk<0 means the point is inside the circle then no change in the y.
		{
			y = y; //as pk is inside the circle so y will be the same.
			pk = pk + (2 * x) + 3;
		}
		else     //if pk>0 or pk=0 the point is either ouside the circle or on the circle ..then we have decrease y
		{
			pk = pk + 2 * (x - y) + 5;
			y--;
		}

		glVertex2f(xinc + x, yinc - y); //draw 8 points at a time.
		glVertex2f(xinc - x, yinc - y);
		glVertex2f(xinc + x, yinc + y);
		glVertex2f(xinc - x, yinc + y);
		glVertex2f(xinc + y, yinc - x);
		glVertex2f(xinc - y, yinc - x);
		glVertex2f(xinc + y, yinc + x);
		glVertex2f(xinc - y, yinc + x);

	}

	glEnd();

	glFlush();
}
void myInit(void)
{
	glClearColor(1.0, 1.0, 1.0, 0.0);
	glColor3f(0.0f, 0.0f, 0.0f);
	glPointSize(8.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0.0, 640.0, 0.0, 480.0);
}

void main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(640, 480);
	glutInitWindowPosition(100, 100);


	printf("Enter value for Xcoordinate:");
	scanf_s("%d", &xinc);
	printf("Enter value for ycoordinate:");
	scanf_s("%d", &yinc);
	printf("Enter value for Radius:");
	scanf_s("%d", &radius);
	y = radius;
	glutCreateWindow("my first attempt");
	glutDisplayFunc(myDisplay);
	myInit();
	glutMainLoop();
}